from scapy.all import *
from subprocess import Popen,PIPE
import os, time
'''
P4Client command connector (v.0.5)
	This is a prototype of P4 runtime command sender.
	Main feature (including module designing):
		> 1. Basic flow entry generator (mirroring, default entries, flow entries)
		> 2. P4 switch script analysis (JSON file analysis) (in process)
	2016-11-03 Update:
		> 1. improve process time of inserting entries
	2017-01-18 Update:
		> 1. Support multi-server (with IP and Port)
		> 2. Error with generating lots of entries
'''

class P4CLI :
	def __init__(self, jsonFile=None, thriftIP=["127.0.0.1"],thriftPort=["9090"]):	# switch = # of Switch, jsonFile = path of P4 JSON File (generated by p4c-bmv2)
		self.thriftPort = thriftPort
		self.thriftIP = thriftIP
		self.switchCLI = []
		self.command = []
		os.system("rm -rf ./commandSender")
		os.system("mkdir -p ./commandSender/CLI")
		os.system("mkdir -p ./commandSender/Command")
		os.system("mkdir -p ./commandSender/LOG")
		for ip,port in zip(self.thriftIP, self.thriftPort):
			self.switchCLI.append("./commandSender/CLI/"+ip+":"+port+".sh")
			self.command.append("./commandSender/Command/"+ip+":"+port+".txt")
			os.system("cp ./sample.sh ./commandSender/CLI/"+ip+":"+port+".sh")
			f = open("./commandSender/CLI/"+ip+":"+port+".sh","a")
			f.write("PYTHONPATH=$PYTHONPATH:$TOOLS_DIR python $CLI_PATH --json "+jsonFile+" --thrift-ip "+ip+" --thrift-port "+port+";\n")
			f.close()

	def mirrorPort(self, switchPortIP, switchPortPort, idx, portNo):
		cmd = ['mirroring_add', str(idx), str(portNo)]
		f = open("./commandSender/Command/"+switchPortIP+":"+switchPortPort+".txt", "a")
		f.write(''.join(cmd[x]+' ' for x in xrange(len(cmd))))
		f.write("\n")
		f.close()

	def setDefaultTable(self, switchPortIP, switchPortPort, tableName, action):
		cmd = ['table_set_default', tableName, action]
		f = open("./commandSender/Command/"+switchPortIP+":"+switchPortPort+".txt", "a")
		f.write(''.join(cmd[x]+' ' for x in xrange(len(cmd))))
		f.write("\n")
		f.close()

	def matchActionTable(self, switchPortIP, switchPortPort, tableName, action, matchData=None, actionData=None):
		if type(matchData) == list :
			matchDataArray =''.join(str(matchData[e])+" " for e in xrange(len(matchData)))
		else:
			matchDataArray = matchData
		if type(actionData) == list:
			actionDataArray =''.join(str(actionData[e])+" " for e in xrange(len(actionData)))
		else:
			actionDataArray = actionData
		if matchData is None:
			cmd = ['table_add', tableName, action, '=>', actionDataArray]
		elif actionData is None:
			cmd = ['table_add', tableName, action, matchDataArray, '=>']
		else :
			cmd = ['table_add', tableName, action, matchDataArray, '=>', actionDataArray]
		f = open("./commandSender/Command/"+switchPortIP+":"+switchPortPort+".txt", "a")
		f.write(''.join(cmd[x]+' ' for x in xrange(len(cmd))))
		f.write("\n")
		f.close()

	def setRegister(self, switchPortIP, switchPortPort, registerName, registerIDX, value):
		cmd = ['register_write', registerName, str(registerIDX), value]
		f = open("./commandSender/Command/"+switchPortIP+":"+switchPortPort+".txt", "a")
		f.write(''.join(cmd[x]+' ' for x in xrange(len(cmd))))
		f.write("\n")
		f.close()

	def sendCommand(self, switchPortIP, switchPortPort):
		with open("./commandSender/Command/"+switchPortIP+":"+switchPortPort+".txt", "r") as f:
			try:
				output = subprocess.check_output("./commandSender/CLI/"+switchPortIP+":"+switchPortPort+".sh", stdin = f)
				f = open("./commandSender/LOG/LOG_"+switchPortIP+":"+switchPortPort+".txt", 'w')
				f.write(output)
				f.close()
			except subprocess.CalledProcessError as e:
				print e
				print e.output
