from scapy.all import *
from subprocess import Popen,PIPE
import os, time

'''
P4Client command connector (v.0.2)
	This is a prototype of P4 runtime command sender.
	Main feature (including module designing): 
		> 1. Basic flow entry generator (mirroring, default entries, flow entries)
		> 2. P4 switch script analysis (JSON file analysis) (in process)
	2016-11-03 Update:
		> 1. improve process time of inserting entries
'''

class P4CLI : 
	def __init__(self, numOfSwitch):
		self.numOfSwitch = numOfSwitch
		self.switchCLI = ["./commandSender/%s.sh" % str(50000 + x) for x in xrange(numOfSwitch)]
		self.command = ["./commandSender/%s.txt" % str(50000 + x) for x in xrange(numOfSwitch)]
		os.system("rm -rf ./commandSender")
		os.system("mkdir ./commandSender")
		for x in xrange(numOfSwitch):
			os.system("cp ./sample.sh ./commandSender/%s.sh" % str(50000+x))
			os.system("echo \"\$CLI_PATH ../P4Output.json "+str(50000+x)+";\" >> ./commandSender/"+str(50000+x)+".sh")
		# self.switch = ["path for all client in bmv2"]
				
	def mirrorAdd(self, switchPortID, idx, portNo):
		cmd = ['mirroring_add', str(idx), str(portNo)]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)
		
	def setDefault_table(self, switchPortID, tableName, action):
		cmd = ['table_set_default', tableName, action]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)
	
	def matchAction_Table(self, switchPortID, tableName, action, matchData=None, actionData=None):
		# Setup match+action action
		if type(matchData) == list :
			matchDataArray =''.join(str(matchData[e])+" " for e in xrange(len(matchData)))
		else:
			matchDataArray = matchData
		if type(actionData) == list:
			actionDataArray =''.join(str(actionData[e])+" " for e in xrange(len(actionData)))
		else:
			actionDataArray = actionData
		if matchData is None:
			cmd = ['table_add', tableName, action, '=>', actionDataArray]
		elif actionData is None:
			cmd = ['table_add', tableName, action, matchDataArray, '=>']
		else :
			cmd = ['table_add', tableName, action, matchDataArray, '=>', actionDataArray]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)
		
	def setRegister(self, switchPortID, registerName, registerIDX, value):
		# Setup registerValue
		cmd = ['register_write', registerName, str(registerIDX), value]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)
		#print output
	
	def readRegister (self, switchPortID, registerName, registerIDX):
		# read register result
		cmd = ['register_read', registerName, str(registerIDX)]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)
		
	def readCounter (self, switchPortID, counterName, counterIDX):
		cmd = ['counter_read', counterName, str(counterIDX)]
		os.system('echo \"'+(''.join(cmd[x]+' ' for x in xrange(len(cmd))))+'\" >> '+switchPortID)

	def sendCommand(self, switchID):
			cmd = self.switchCLI[switchID]
			with open(self.command[switchID], "r") as f:
				try:
					output = subprocess.check_output(cmd, stdin = f)
					print output
				except subprocess.CalledProcessError as e:
					print e
					print e.output
